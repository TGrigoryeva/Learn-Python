'''

Задача

    Получим данные о температуре в Москве в Цельсиях
    Выведем на главной странице текущую дату, город и температуру

'''
from datetime import datetime

from news_list import all_news

from flask import Flask #  в return у FLASK всегда д.б. строка

from requests_module import get_weather

city_id = 524901 #ID города с сайта https://openweathermap.org/city/524901
apikey = "721cc70f0ae7cc5113819ebc393a8966" # API key с сайта openweathermap.org

app = Flask(__name__) # создали переменную, содержащую приложение. name - название текущего файла
#@app.route("/") # привязываем к определенным адресам функции-обработчики. "/"  - означает главную страницу

@app.route("/") # создали страницу test. при помощи аппрута мы говорим какую страницу мы хотим формировать, т.е. по какому адрусу должен отвечать сервер. После нее идет функция, к-ая должна давать ответ на наш запрос
def index(): #функция, которая его обрабатывает
    url = "http://api.openweathermap.org/data/2.5/weather?id=%s&APPID=%s&units=metric" % (city_id, apikey)# % - для того, чтобы заменить в адресе буквы s на наши переменные
    weather = get_weather(url)
    current_date = datetime.now().strftime("%d.%m.%Y")
    print(current_date)
    result = "<p><b>Температура: %s</p><b>" % weather["main"]["temp"] # в ключе main есть словарь с ключом temp. Для обращения к элементам вложенного словаря соответственно необходимо использовать два ключа
    result += "<p><b>Город: %s</p><b>" % weather["name"]
    result += "<p><b>Дата: %s</p><b>" % current_date
    
    return result # 3 символа = длина контента (если смотреть в postman) также мы увидим тип text и кодировку utf-8 (все используют по умолчанию)
 # <news_id> - это шаблон. те в реальности мб что угодно.  в этой конструкции в адресе дб news и еще что-то/ При помощи INT мы говорим, что в этом месте в адресной строке дб целое число
@app.route("/news/<int:news_id>")
def news_by_id(news_id):

# ниже в переменную вернется список, если идентификатор найдется
# [news for news in all_news if news["id"] == news_id] - выбираем переменную news в цикле for news in all_news
# если news["id"] = то, что нам передали, происходит инициализация переменной news, а затем это попадет в переменную news to show

    news_to_show = [news for news in all_news if news["id"] == news_id] # в эту переменную могут списком вернуться словари, если идентификатор дублируется
    if len(news_to_show) == 1: # длина списка
        result = "<h1>%(title)s</h1><p><i>%(date)s</i></p><p>%(text)s</p>)" # %(title)s - это именованный символ подстановки. так удобнее
        result = result % news_to_show[0] # через подстановку передаем словарь. news_to_show положили в отформатированный выше result!
        return result 
    else:
        abort(404)

    

# делаем так,чтобы flask приложение умело запускаться. 
if __name__ == "__main__": #если файл запускается напрямую, значит надо запускать приложение
    app.run(port = 5000, debug = True) # 127.0.0.1 - local host, т.е. внутренний адрес компа. К этому ажресу можно получить доступ только с самого  :5000 - это порт. 80 порт - стандартный для всех web-адресов. 




''' 
\n html игнорирует, поэтому переносим иначе строку)
<p> - перенос текста на след строку
<b> - жирное выделение
<h1> - главный заголовок сраницы
<i> - наклонный текст
% такая подстановка хороша тем, что у нас всегда будет на выходе строка, даже если ранее у переменной был тип int
'''